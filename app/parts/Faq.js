"use client"
import React, { useState } from "react";

export default function Faq() {
    const [faqs, setFaqs] = useState([
        {
            q: "画像の解像度の制約はありますか？対応する画像の拡張子を教えてください。",
            a: "AIの種類によって対応する解像度が異なりますが、そのうち1つは解像度の制約は約5000pixel程度で、もう１つは1000pixel程度です。画像の拡張子は、bmp, png. jpeg/jpg, tiffに対応しております。",
            open: false
        },
        {
            q: "画像生成にかかる時間はどれくらいですか？",
            a: "画像の解像度に依存しますが、1枚1秒から数秒程度です。",
            open: false
        },
        {
            q: "何枚の画像を学習データに加えると精度向上が期待できますか？",
            a: "精度向上に必要な枚数はケース・バイ・ケースですが、一例として20枚程度の不良データに対して100枚程度の不良データを追加したところ、約10%の見逃し率と誤検知率をともに0%にできたという事例がございます。",
        },
        {
            q: "ある製品の不良部を別の製品に移植することはできますか？",
            a: "はい、ある製品の不良部を別の製品に移植することができます。不良データが蓄積されていないような新製品の立ち上げ時に特に有効です。",
            open: false
        },
        {
            q: "市販の外観検査ソフトウェアにも合成データを利用できますか？",
            a: "はい、合成データは市販の外観検査ソフトウェアにも利用できます。市販の外観検査ソフトウェアの水増し（データ拡張）機能に加えて、合成データを活用することで撮像データだけを使う場合に比べて精度が向上したという事例が多数報告されています。",
            open: false
        },
        {
            q: "どのようなプロパティを変化させることができますか？",
            a: "不良部の大きさ、回転角度、形状、色、輝度などのプロパティを変化させることができます。",
        },
        {
            q: "合成データを評価データに使うことは可能ですか？",
            a: "はい、生成した合成データは評価データとしてご利用することも可能です。",
            open: false
        },
        {
            q: "ルールベース検査にも使えますか？",
            a: "ルールベース検査用途に人為的には用意するのが難しい、評価用の網羅的な（様々なプロパティを変化させた）不良データを合成することが可能です。",
            open: false
        },
        {
            q: "良品画像は生成できますか？",
            a: "不良品画像のかわりに良品画像をAIの入力することで、良品画像も生成することができます。",
        },
        {
            q: "必要なPCのスペックはどれくらいですか？",
            a: "クラウドサービスなのでお使いのPCのスペックの制約はございません。",
            open: false
        },
    ]);
    const onToggle = index => {
        setFaqs(
            faqs.map((faq, i) => {
              if (i === index) {
                faq.open = !faq.open;
              } else {
                faq.open = false;
              }
      
              return faq;
            })
          );
    }
    return (
        <div className="faqs">
            {faqs.map((item, i) =>
                <dl key={i}>
                    <dt onClick={() => onToggle(i)} className={item.open ? "open": ""}>{item.q}</dt>
                    <dd>{item.a}</dd>
                </dl>
            )}
        </div>
    );
}
